;; -*- mode:lisp -*-

(in-package :stumpwm)

(set-prefix-key (kbd "C-q"))

(set-module-dir "~/.stumpwm.d/modules")

;(load-module "window-tags")
;(load-module "frame-tags")

;(load-module "kbd-layouts")

; sudo modprobe -r psmouse && sudo modprobe psmouse proto=imps

(setf *startup-message* nil
      *input-window-gravity* :center
      *time-format-string-default* "%Y/%m/%d(%a) %H:%M"
      *message-window-timer* 1
      *mouse-focus-policy* :sloppy
      *normal-border-width* 0
      *maxsize-border-width* 0
      *transient-border-width* 1
      *window-border-style* :thick)

(setf *frame-indicator-text* "!")

;; fprev patch
(defcommand (fprev tile-group) () ()
  "Cycle through the frame tree to the prev frame."
  (focus-prev-frame (current-group)))

(defcommand key-escape () ()
  (send-meta-key (current-screen) (kbd "ESC")))

(defcommand key-backspace () ()
  (send-meta-key (current-screen) (kbd "BackSpace")))

(defcommand key-enter () ()
  (send-meta-key (current-screen) (kbd "Return")))

(defcommand key-end () ()
  (send-meta-key (current-screen) (kbd "End")))

(defcommand key-back () ()
  (send-meta-key (current-screen) (kbd "M-Left")))

(defcommand key-next () ()
  (send-meta-key (current-screen) (kbd "M-Right")))

(defcommand key-ctrl () ()
  (send-meta-key (current-screen) (kbd "Control_L")))

;; Change Frame by Alt-Tab
(define-key *top-map* (kbd "F10") "pull-hidden-next")
(define-key *top-map* (kbd "F11") "fprev")
(define-key *top-map* (kbd "F12") "fnext")

(define-key *top-map* (kbd "M-k") "move-focus up")
(define-key *top-map* (kbd "M-j") "move-focus down")
(define-key *top-map* (kbd "M-l") "move-focus right")
(define-key *top-map* (kbd "M-h") "move-focus left")
(define-key *top-map* (kbd "C-m") "meta Return")
(define-key *top-map* (kbd "C-[") "key-escape")
(define-key *top-map* (kbd "M-[") "key-back")
(define-key *top-map* (kbd "M-]") "key-next")
;; (define-key *top-map* (kbd "Caps_Lock") "key-ctrl")
;(setf kbd-layouts:*caps-lock-behavior* :ctrl)

(define-key *top-map* (kbd "C-M-k") "move-window up")
(define-key *top-map* (kbd "C-M-j") "move-window down")
(define-key *top-map* (kbd "C-M-l") "move-window right")
(define-key *top-map* (kbd "C-M-h") "move-window left")

(defcommand key-down () ()
  (send-meta-key (current-screen) (kbd "Down")))

(defcommand key-up () ()
  (send-meta-key (current-screen) (kbd "Up")))

(defcommand key-left () ()
  (send-meta-key (current-screen) (kbd "Left")))

(defcommand key-right () ()
  (send-meta-key (current-screen) (kbd "Right")))

;(define-key *top-map* (kbd "C-n") "key-down")
;(define-key *top-map* (kbd "C-p") "key-up")
;(define-key *top-map* (kbd "C-b") "key-left")
;(define-key *top-map* (kbd "C-f") "key-right")

(undefine-key *top-map* (kbd "C-n"))
(undefine-key *top-map* (kbd "C-p"))
(undefine-key *top-map* (kbd "C-b"))
(undefine-key *top-map* (kbd "C-f"))

;; set the default shell
(setf *shell-program* "/usr/bin/zsh")

;; set background-color
(run-shell-command "xsetroot -solid black" t)

;; xlsfonts | grep iso10646 で確認する
;; fontインストール後、
;; sudo apt-get install ttmkfdir
;; sudo mkfontdir
;; sudo xset fp+ /usr/share/fonts/truetype/kochi/kochi-gothic.ttf
;; (set-font "-misc-unifont jp-medium-r-normal--0-0-0-0-p-0-iso10646-1")
;; (set-font "-gnu-unifont csur-medium-r-normal-sans-16-160-75-75-c-80-iso10646-1")
;; (set-font "-misc-fixed-bold-r-normal--0-0-100-100-c-0-iso10646-1")
;; (set-font "-kochi-gothic-medium-r-normal-*-*-110-*-*-p-*-iso10646-1")
;(set-font "-*-*-gothic-medium-r-normal-*-12-*-*-*-*-*-iso10646-1")
;(set-font "-*-gothic-medium-r-normal-*-*-*-*-*-p-*-iso10646-1")
;(set-font "-artwiz-snap-normal-*-*-*-*-*-*-*-*-*-iso10646-*")
;(set-font "-*-profont-medium-r-normal-*-14-*-*-*-*-*-iso8859-*")
;(set-font "-*-terminus-medium-r-normal-*-12-*-*-*-*-*-iso10646-1")
;(set-font "-misc-sazanami gothic-medium-r-normal--12-0-0-0-p-0-iso10646-1")
;(set-font "-gnu-unifont-medium-r-normal--16-160-75-75-c-80-iso10646-1")
;(set-font "-misc-fixed-medium-r-normal-ja-0-0-100-100-c-0-iso10646-1")
;(set-font "-misc-fixed-medium-r-normal-ja-0-0-75-75-c-0-iso10646-1")
;(set-font "-misc-fixed-medium-r-normal-ja-18-120-100-100-c-180-iso10646-1")
;(set-font "-mutt-clearlyu alternate glyphs-medium-r-normal--0-0-100-100-p-0-iso10646-1")
;(set-font "-efont-fixed-bold-r-normal--0-0-75-75-c-0-iso10646-1")
;(set-font "-misc-fixed-medium-r-normal-ja-13-120-75-75-c-120-iso10646-1")
;(set-font "-sony-fixed-medium-r-normal--0-0-100-100-c-0-jisx0201.1976-0")
;(set-font "-misc-fixed-medium-o-normal--0-0-75-75-c-0-iso8859-1")
;(set-font "-misc-fixed-medium-r-normal-ja-0-0-100-100-c-0-iso10646-1")
;(set-font "-urw-standard symbols l-medium-r-normal--0-0-0-0-p-0-iso10646-1")
;(set-font "-misc-ipagothic-medium-r-normal--16-0-0-0-p-0-iso10646-1")
;(set-font "-shinonome-gothic-medium-r-normal--32-*-iso8859-1")
;(set-font "-misc-fixed-*-*-*-*-15-*-*-*-*-*-iso10646-*")
;(set-font "-misc-kochi gothic-medium-r-normal--0-0-0-0-c-0-iso10646-1")
;(set-font "-misc-apjapanesefont-medium-r-normal--0-0-0-0-c-0-iso10646-1")

;; (define-key *root-map* (kbd "C-f") "open-www-browser")
;(define-key *root-map* (kbd "C-l") "open-chrome")

(define-key *root-map* (kbd "C-n") "gnext")
(define-key *root-map* (kbd "C-p") "gprev")

(define-key *root-map* (kbd "0") "remove")
(define-key *root-map* (kbd "1") "only")
(define-key *root-map* (kbd "2") "vsplit")
(define-key *root-map* (kbd "3") "hsplit")

(define-key *root-map* (kbd "C-l") "screen-lock")

(define-key *root-map* (kbd "C-;") "colon")
(define-key *root-map* (kbd "C-j") "colon")
(define-key *root-map* (kbd "j") "colon")

;; turn on/off the mode line for the current head only
(stumpwm:toggle-mode-line (stumpwm:current-screen)
                          (stumpwm:current-head))

(setf *mode-line-background-color* 'black)

(setf *mode-line-position* :bottom)
(setf *mode-line-timeout* 1)

(defun show-battery ()
  (let ((raw-battery (run-shell-command "acpi | cut -d, -f2" t)))
    (substitute #\Space #\Newline raw-battery)))

(defun battery-row-num ()
  (parse-integer (run-shell-command "acpi | cut -d, -f2 | sed -e 's/%//' -e 's/ //'" t)))

(defun show-battery-state ()
  (let ((raw-battery (run-shell-command "acpi | cut -d: -f2 | cut -d, -f1" t)))
    (substitute #\Space #\Newline raw-battery)))

(defun show-ip-address ()
  (let ((ip (run-shell-command "dig +short myip.opendns.com @resolver1.opendns.com" t)))
    (substitute #\Space #\Newline ip)))

(setf stumpwm:*screen-mode-line-format*
      (list '(:eval (stumpwm:run-shell-command "LC_TIME=en_US.UTF-8 date +'%Y/%m/%d(%a) %H:%M:%S'" t))
            '(:eval (show-battery))
            '(:eval (show-battery-state))))
            ;; "| " '(:eval (show-ip-address))))

;(defparameter *desktop-background-image-path* (concat (getenv "HOME") "/downloads/myphoto.jpg"))

(set-focus-color "darkslategray")
(set-unfocus-color "black")
(set-win-bg-color "black")
(set-fg-color "white")
(set-bg-color "black")
(set-border-color "DarkRed")
(set-normal-gravity :center)

;(define-key *top-map* (kbd "M-Left") "move-focus left")
;(define-key *top-map* (kbd "M-Right") "move-focus right")
;(define-key *top-map* (kbd "M-Up") "move-focus up")
;(define-key *top-map* (kbd "M-Down") "move-focus down")

(define-key *top-map* (kbd "F1") "select-window brave")
(define-key *top-map* (kbd "F2") "select-window slack")
(define-key *top-map* (kbd "F3") "select-window terminal")
(define-key *top-map* (kbd "F4") "select-window emacs")
(define-key *top-map* (kbd "F5") "select-window LINE")
(define-key *top-map* (kbd "M-F6") "gselect 6")
(define-key *top-map* (kbd "M-F7") "gselect 7")
(define-key *top-map* (kbd "M-F8") "gselect 8")
(define-key *top-map* (kbd "M-F9") "gselect 9")
(define-key *top-map* (kbd "M-F10") "gselect 10")

(define-key *root-map* (kbd "c") "terminal")

(setf *startup-message* "0344056976(0367012927)")
; HK: 57251369
; HKID: M805404(0)
; MN: 494654842569

#|
(load "~/.emacs.d/slime/swank-loader.lisp")
(swank-loader:init)

(defcommand swank () ()
  (setf stumpwm:*top-level-error-action* :break)
  (swank:create-server :port 4005
                       :style swank:*communication-style*
                       :dont-close t)
  (echo-string (current-screen)
               "Starting swank, M-x slime-connect RET RET, then (in-package stumpwm)."))

(swank)
|#

(defmacro my-defcommand (name command)
  `(defcommand ,name () ()
     (run-shell-command (format nil "~a" ,command))))

(my-defcommand dictionary "/usr/lib/mozc/mozc_tool --mode=config_dialog")
(my-defcommand screen-lock "/usr/bin/gnome-screensaver-command --lock && xset dpms force standby")
(my-defcommand screen-shot "/usr/bin/gnome-screenshot && nautilus /home/hiroaki/Pictures/")
(my-defcommand zoom "/usr/bin/zoom")
(my-defcommand openshot "/usr/bin/openshot-qt")
(my-defcommand nautilus "nautilus")
(my-defcommand downloads "nautilus Downloads")
(my-defcommand dbeaver "dbeaver")
(my-defcommand firefox "firefox")
(my-defcommand skype "skypeforlinux")
(my-defcommand gedit "gedit")
(my-defcommand gnome-control-center "gnome-control-center")
(my-defcommand gnome-sound-recorder "gnome-sound-recorder")
(my-defcommand wifi-radar "wifi-radar")
(my-defcommand sound "pavucontrol")
(my-defcommand network "gnome-control-center network")
(my-defcommand gmrun "gmrun")
(my-defcommand calc "xcalc")
(my-defcommand dm "dmenu_run -p 'sh -c ' -nb black -nf cyan2 -fn '-*-ohsnap.icons-medium-*-*-*-11-*-*-*-*-*-*-*' -sf violet -sb black")
(my-defcommand c "conkeror")
(my-defcommand settings "gnome-control-center")
(my-defcommand button-maker "google-chrome http://box.aflat.com/buttonmaker/")
(my-defcommand button-css "https://saruwakakun.com/html-css/reference/buttons")
(my-defcommand gyazo "gyazo")
(my-defcommand gyazo-gif "/usr/local/bin/gyazo-gif")
(my-defcommand inkscape "inkscape")
(my-defcommand blender "blender")
(my-defcommand openscad "/usr/bin/openscad")
(my-defcommand audtty "gnome-terminal -e 'audtty'")
(my-defcommand mute "amixer set Master 0%")
(my-defcommand non-mute "amixer set Master 100%")

(defcommand paste () ()
  (let ((string (run-shell-command "xclip -o")))
    (window-send-string string)))

(defcommand window-single () ()
  (run-shell-command "xrandr -s 0"))

(defcommand window-left () ()
  (run-shell-command "xrandr --output HDMI-1 --mode 1920x1080 --left-of eDP-1"))

(defcommand window-right () ()
  (run-shell-command "xrandr --output HDMI-1 --mode 1920x1080 --right-of eDP-1"))

(defcommand window-top () ()
  (run-shell-command "xrandr --output HDMI-1 --mode 1920x1080 --above eDP-1"))

;; open-www-browser
(defcommand open-www-browser () ()
  (run-or-raise "/usr/bin/google-chrome" '(:class "google-chrome")))

(defcommand open-chrome () ()
  (run-or-pull "/usr/bin/google-chrome" '(:class "google-chrome")))

(defcommand libreoffice () ()
  (run-or-raise "/usr/bin/libreoffice" '(:class "libreoffice")))

(defcommand terminal () ()
  (run-or-raise "/usr/bin/gnome-terminal" '(:class "urxvt")))

(defcommand conkeror () ()
  (run-or-raise "conkeror" '(:class "c")))

(defcommand emacs () ()
  (run-or-raise "emacs" '(:class "emacs")))

(defcommand code () ()
  (run-or-raise "code" '(:class "code")))

(defcommand cursor () ()
  (run-or-raise "cursor" '(:class "cursor")))

(defcommand e () ()
  (run-or-raise "emacs" '(:class "emacs")))

(defcommand guess (word) ((:string "word:"))
  (run-shell-command (format nil "conkeror ~s.com" word)))

(defcommand uptime () ()
   (echo-string (current-screen) (run-shell-command "uptime" t)))

(defcommand server (port) ((:string "port: "))
  (run-shell-command (format nil "python -m SimpleHTTPServer ~a" port)))

(defcommand dpass () ()
  (run-shell-command (format nil "zsh /home/hiragi/bin/dpass.zsh")))

(defcommand mouse-move (x y) ((:string "x: ") (:string "y: "))
  (run-shell-command (format nil "xte 'mousemove ~a ~a'" x y) t))

(defcommand left-click () ()
  (run-shell-command "xte 'mouseclick 1'" t))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Bookmark
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmacro defbookmark (name url)
  `(defcommand ,name () ()
     (run-or-raise (format nil "google-chrome ~s" ,url) '(:class "g-chrome"))))

(defmacro defbookmark-secret (name url)
  `(defcommand ,name () ()
     (run-or-raise (format nil "google-chrome ~s -incognito" ,url) '(:class "g-chrome"))))

(defbookmark hanwa-moneyforward "https://expense.moneyforward.com/expense_report_units")
(defbookmark kadaiseisaku.com "https://xn--2qq74i47uwm5a.com/")
(defbookmark render.com "https://dashboard.render.com/")
(defbookmark supabase "https://supabase.com/dashboard/projects")
(defbookmark peach "https://booking.flypeach.com/jp")
(defbookmark megamoji "https://zk-phi.github.io/MEGAMOJI/")
(defbookmark finds "https://www.finds-x.com/admin")
(defbookmark patios "https://www.ur-net.go.jp/chintai/kanto/chiba/result/?skcs=106&skcs=106&rent_low=&rent_high=&rent_low=&rent_high=&walk=&walk=&floorspace_low=&floorspace_high=&floorspace_low=&floorspace_high=&years=&years=&tdfk=12&todofuken=chiba")
(defbookmark bard "https://bard.google.com")
(defbookmark labola "https://labola.jp/r/")
(defbookmark music-playlist "https://www.youtube.com/playlist?list=PLpzQa4cJd_4bIWhgzT77y2Wqh5EspMnc3")
(defbookmark sendgrid "https://app.sendgrid.com")
(defbookmark lgtmoon "https://lgtmoon.herokuapp.com")
(defbookmark agentgpt "https://agentgpt.reworkd.ai")
(defbookmark ahamo "https://ahamo.com/myportal/home/auth/")
(defbookmark iherb "https://jp.iherb.com/")
(defbookmark binance "https://www.binance.com/en/my/dashboard")
(defbookmark chatgpt "https://chatgpt.com/?model=o3-mini-high")
(defbookmark hamusoku "https://hamusoku.com/")
(defbookmark cabinas "http://cabinas.jp/")
(defbookmark perplexity "https://www.perplexity.ai/")
(defbookmark genspark "https://www.genspark.ai/")
(defbookmark password-generator "https://www.graviness.com/app/pwg/")
(defbookmark keihi-shinsei "https://secure.freee.co.jp/expense_applications_v2")
(defbookmark monday "https://monday.com/lang/ja/")
(defbookmark chill-music "https://www.youtube.com/playlist?list=PLpzQa4cJd_4ZNr4xaR41L8EHfUhIgM_dg")
(defbookmark tanshuku "https://url.onl.jp/")
(defbookmark hanwa-kh-logistics "https://the-kh-logistics.com")
(defbookmark nikkei-office-pass "https://officepass.nikkei.com/user/index.php")
(defbookmark drawings/new "https://drawings.new")
(defbookmark mailchimp "https://us5.admin.mailchimp.com/")
(defbookmark skymark "https://www.skymark.co.jp/ja/")
(defbookmark ut-board "https://ut-board.com/users/mypage")
(defbookmark live.qq "https://live.qq.com/")
(defbookmark html2hiccup "http://html2hiccup.buttercloud.com/")
(defbookmark 2ch-ranking "http://2ch-ranking.net/")
(defbookmark tiktok "https://www.tiktok.com/following")
(defbookmark proton-mail "https://mail.proton.me/u/0/inbox/Z4fazK0m4f6CEwJI_ucFAL9ZUUKzzOJyX0ZkqsfLh2UIwLbSV858dZWxA-5iFs5qw4nIFdO5D8X-TGcNqLQTdg==")
(defbookmark box "https://app.box.com/")
(defbookmark airtable "https://airtable.com/")
(defbookmark twtimez "http://www.twtimez.net/")
(defbookmark vercel "https://vercel.com/catallaxy")
(defbookmark cron "https://docs.google.com/spreadsheets/d/12UPbwY5KoLYg8mwEo6vsozwTAbXaIRJXYeMYFmJuhc8/edit#gid=0")
(defbookmark workhub "https://pass.workhub.site/spaces")
(defbookmark yadorigi "https://app-hotelcowork.yadorigi-myspace.com/my/spot_contracts/124/select")
(defbookmark hubspot "https://app.hubspot.com/contacts/20749882/objects/0-3/views/all/board")
(defbookmark colla "https://colla.jp/organizations")
(defbookmark mermaid-js "https://mermaid-js.github.io/docs/mermaid-live-editor-beta/#/edit/eyJjb2RlIjoicGllXG4gIFwiaU9TXCI6IDQ1LjJcbiAgXCJpUGhvbmVcIjogMTcuMlxuICBcIlBIUFwiOiA4LjZcbiAgXCJPYmplY3RpdmUtQ1wiOiA2LjVcbiAgXCJTd2lmdFwiOiA2LjVcbiAgXCJYY29kZVwiOiA0XG4gIFwiTGFyYXZlbFwiOiAzXG4gIFwiUmVhbG1cIjogM1xuICBcIkFuZHJvaWRcIjogM1xuICBcIk90aGVyc1wiOiAyIiwibWVybWFpZCI6e30sInVwZGF0ZUVkaXRvciI6ZmFsc2V9")
(defbookmark inbox "https://app.asana.com/0/inbox/464419593318082")
(defbookmark freee "https://secure.freee.co.jp/")
(defbookmark freee-jinjiroumu "https://p.secure.freee.co.jp/")
(defbookmark atodemiru "https://www.youtube.com/playlist?list=WL")
(defbookmark health "https://docs.google.com/spreadsheets/d/10LqzEyme5U0UwiupZleYEl9p7JiMKuQ04RGzeqryQyM/edit#gid=0")
(defbookmark chart "https://chart.mitsu-ri.net/projects?type=matched")
(defbookmark h1t "https://satellite-office.work/mypage")
(defbookmark h1t-admin "https://satellite-office.work/manage")
(defbookmark pdf-editor "https://www.hipdf.com/jp/pdf-editor")
(defbookmark futpark "https://futpark.me/plans/embed?facility_id=315dd72a-761a-4e8b-b087-8c53584fd1df&type=GatheringPlan")
(defbookmark okr "https://app.asana.com/0/goals/464419593318082/list")
(defbookmark talentio "https://talentio.com/r/ats/dashboards")
(defbookmark erp "https://erp.mitsu-ri.net/")
(defbookmark camcloud "https://camcloud.jp/")
(defbookmark tech-journey "https://tech-journey.jp/")
(defbookmark mindomo "https://www.mindomo.com/ja/dashboard")
(defbookmark shigoto-ba "https://www.google.co.jp/maps/@35.687233,139.7666282,13z/data=!3m1!4b1!4m3!11m2!2sxXWlhVRmRt3eEWAX0FMZ7XEUpIYqMA!3e3")
(defbookmark call-logs "https://metabase.mitsu-ri.net/question/721")
(defbookmark miro "https://miro.com/app/dashboard/")
(defbookmark fjord "https://bootcamp.fjord.jp/companies/35/reports")
(defbookmark forkwell "https://jobs.forkwell.com/admin/catallaxy/scouts")
(defbookmark 1password "https://catallaxy.1password.com/home")
(defbookmark cloudbeaver "https://cloudbeaver.mitsu-ri.net/")
(defbookmark loom "https://www.loom.com/my-videos")
(defbookmark notion "https://www.notion.so/")
(defbookmark management "https://app.mitsu-ri.net/management")
(defbookmark assets "https://github.com/hiragi/assets")
(defbookmark google-audit "https://admin.google.com/ac/reporting/audit/drive")
(defbookmark netflix "https://jobs.netflix.com/culture?lang=%E6%97%A5%E6%9C%AC%E8%AA%9E")
(defbookmark schedule "https://calendar.app.google/Pcyr8PDTo5dYjvhR9")
(defbookmark-secret princess "https://www.a090.biz/schedule/")
(defbookmark shuji "https://meet.google.com/zmo-ngkk-yns")
(defbookmark hamaishi-cam1 "https://meet.google.com/qfg-uwfe-qzg")
(defbookmark hamaishi-cam2 "https://meet.google.com/tdg-zqov-rad")
(defbookmark youtube-studio "https://studio.youtube.com/channel/UCjqIWi3Kw26G2SEoUfsJ-Mg/videos/upload?filter=%5B%5D&sort=%7B%22columnType%22%3A%22date%22%2C%22sortOrder%22%3A%22DESCENDING%22%7D")
(defbookmark emoji-gen "https://emoji-gen.ninja/")
(defbookmark hotpepper-beauty "https://beauty.hotpepper.jp/svcSA/")
(defbookmark dmm-make "https://akiba.dmm-make.com/mypage")
(defbookmark hamaishi-uriage2 "https://docs.google.com/spreadsheets/d/1gTiXebTYmVH2hWftZ4tkNiSUNo9x6ZE1Fg8lPlaVXjM/edit#gid=0")
(defbookmark hamaishi-uriage "https://docs.google.com/spreadsheets/d/1HUY-bItawkzFZPgO7AP5AK49rgOClDDWd_c-XvGfWII/edit#gid=378212877")
(defbookmark hamaishi "https://hamaishi.jp/")
(defbookmark monotaro "https://www.monotaro.com/")
(defbookmark asakai "https://meet.google.com/epy-tugj-gep")
(defbookmark kpi "https://docs.google.com/spreadsheets/d/1Zp06V805ygKxM1qI_yT-ugn0Uhla8iepoHQ6W8Xv4LU/edit#gid=1427713014")
(defbookmark aww "https://awwapp.com/")
(defbookmark reviews "https://metabase.mitsu-ri.net/question/112")
(defbookmark ncviewer "https://ncviewer.com/")
(defbookmark seikyusho "https://metabase.mitsu-ri.net/question/16")
(defbookmark shunou-daikou "https://docs.google.com/spreadsheets/d/1tAPUWapVFq-I3gz9JvvtWmJSEi4mllk81C1klg67Plw/edit#gid=1599213388")
(defbookmark meet.google.com-room "https://meet.google.com/ure-sgwk-taj")
(defbookmark mainichi "https://mainichi.jp/covid19")
(defbookmark sli.do "https://admin.sli.do/events")
(defbookmark onedrive "https://onedrive.live.com/")
(defbookmark shapeways "https://www.shapeways.com/")
(defbookmark autodesk-viewer "https://viewer.autodesk.com/designviews")
(defbookmark tinkercad "https://www.tinkercad.com/dashboard")
(defbookmark treatstock "https://jp.treatstock.com/")
(defbookmark respect-messages "https://drive.google.com/drive/u/0/search?q=%E3%83%AA%E3%82%B9%E3%83%9A%E3%82%AF%E3%83%88%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8")
(defbookmark shunou-daikou "https://docs.google.com/spreadsheets/d/1L6ZlO49TXhwcHB4je-pc2_cGIFpRvjgTkq9RYiM1hQo/edit#gid=0")
(defbookmark smarthr "https://catallaxy.smarthr.jp/")
(defbookmark jenkins "https://jenkins.mitsu-ri.net/")
(defbookmark re-work "https://rework.withgoogle.com/jp/")
(defbookmark crowd-agent "https://company.crowd-agent.com/")
(defbookmark muji "https://www.muji.net/store/")
(defbookmark uniqlo "https://www.uniqlo.com/jp/ja/wishlist")
(defbookmark interworks "https://clt.interworks.jp/app/m/clt/a/C02")
(defbookmark mynavi "https://baito.mynavi.jp/client/")
(defbookmark sagawa "http://k2k.sagawa-exp.co.jp/p/sagawa/web/okurijoinput.jsp")
(defbookmark fukuri "https://www.fukuri.jp/fkr/apps/top/AASC20111.cfm")
(defbookmark note/new "https://note.mu/notes/new")
(defbookmark cal/new "https://cal.new")
(defbookmark api/new "https://api.new")
(defbookmark coda/new "https://coda.new")
(defbookmark sheetmetal "http://www.machinist.co.jp/member/backnumber/")
(defbookmark upwork "https://www.upwork.com/")
(defbookmark bizreach-2 "https://cr-support.jp/tool/grade/jobs/983127/resumes")
(defbookmark htr "https://beauty.hotpepper.jp/CSP/bt/reserve/selectCoupon?storeId=H000239300")
(defbookmark efax "https://www.efax.co.jp/")
(defbookmark kyukyoku-no-ichimai "https://docs.google.com/spreadsheets/d/1Bu5bY-zH2Hw_JA6FthloeTiDoJC1tQmNKg1NnqvsNlM/edit#gid=0")
(defbookmark 3d-cad-models "https://web2cad.partcommunity.com/3d-cad-models/sso/p-04-%E3%83%90%E3%83%B3%E3%83%89%E3%83%BC%E5%8C%96%E5%AD%A6%E6%A0%AA%E5%BC%8F%E4%BC%9A%E7%A4%BE?info=bando%2Foptions%2Fpro_file%2Fp_04%2Fp_04.prj")
(defbookmark estp "https://www.16personalities.com/ja/estp%E5%9E%8B%E3%81%AE%E6%80%A7%E6%A0%BC")
(defbookmark meviy "https://meviy.misumi-ec.com/3dview?qtId=104581&prevPageNo=1&visitService=km&qtItemId=628160")
(defbookmark toyoshi-mtg "https://zoom.us/j/6781996532")
(defbookmark bizreach "https://cr-support.jp/mypage/")
(defbookmark hkexpress "https://booking.hkexpress.com/ja-JP/check-in/login")
(defbookmark smartone "https://myaccount.smartone.com/jsp/ir/ir_simple_login.jsp?language=E")
(defbookmark kabunushi-meibo "https://docs.google.com/spreadsheets/d/0Bw09SoN2cTLacjkyQ3FuYWtWekJmc2wwTnE0U19wVFlhZzlJ/edit#gid=972710803")
(defbookmark gyazo-captures "https://gyazo.com/captures")
(defbookmark pre-a "https://docs.google.com/presentation/d/1PIz5NEtYGb1YnMu6_3_zEsmb-wT2FL6dZDfxrU7QyGI/edit#slide=id.g566dbdad9a_2_22")
(defbookmark rakuten-communications "https://comm.rakuten.co.jp/goriyouchu/ip_tenso/regist.html")
(defbookmark fondesk "https://www.fondesk.jp/app/overview")
(defbookmark outsourcing-money "https://docs.google.com/spreadsheets/d/1LxzQT-EElI_BvXkxQ4G6ZqinFA5kbbU-dWRt1RnP60s/edit#gid=0")
(defbookmark best-sellers-business "https://www.amazon.co.jp/gp/bestsellers/books/466282/ref=zg_bs_nav_b_1_b")
(defbookmark best-sellers-it "https://www.amazon.co.jp/gp/bestsellers/books/466298/ref=zg_bs_nav_b_1_b")
(defbookmark naruke "https://honz.jp/search/author/%E6%88%90%E6%AF%9B%20%E7%9C%9E")
(defbookmark wework "https://members.wework.com/account/members")
(defbookmark articles "https://mitsu-ri.net/articles")
(defbookmark app.mitsu-ri.net "https://app.mitsu-ri.net/")
(defbookmark kambayashi-ad-sheet "https://docs.google.com/spreadsheets/d/1XE72c8Gf1tRPZevnm7HODmWy69m1OrJpgj_TP90dW0E/edit#gid=785612656")
(defbookmark natsumi-cs-sheet "https://docs.google.com/spreadsheets/d/1EZh3Sinsn5Fphm2jjOuHG_SrO728lhjCs2JKxWyHPws/edit#gid=0")
(defbookmark job-draft "https://job-draft.jp/manage")
(defbookmark url-shortner "https://bitly.com/")
(defbookmark employees "https://payroll.moneyforward.com/employees")
(defbookmark new-homes "https://www.homes.co.jp/search/condition-list/?nx_id=condition-list_08_20140204002")
(defbookmark indeed "https://employers.indeed.com/j#jobs")
(defbookmark infra "https://enterprise.in-fra.jp/")
(defbookmark 01intern "https://01intern-admin.com/corporation/selection/message.html")
(defbookmark cloudsign "https://www.cloudsign.jp/dashboard")
(defbookmark doubutsu-uranai "https://www.doubutsu-uranai.com/")
(defbookmark kindle-list "https://www.amazon.co.jp/hz/mycd/myx?ie=UTF8&aToken=Atza%7CIwEBIERwd2n7Hrg1I9kKQf3Vou6f-u9cFKXYDIBinoyVnBxAz5E1Gkc28qGp29EYwjbmewuCzU2AriW-wOxDP9urDCOjadQr1Z0XtdorfcNjhXsDdok6sz5ZV6eEuFrikO7Y0eEiHJwLiL1VIprbwTU9iIQPur89jvxiEPINUs-kUhtlVWDlnjgj3yCW2ovsn4QwJyRHHzI5ZuEsvLJnPNew2G7PVUKEiBjbedwJKhBp8NFNT8PRddSxoy0TQfLSIpGt8ZnN46gn3tnVzCJmnYgxsoivEyWGx9dUcYIKzavXNSfXbKmZsAHyH39BaXG0DeljfwDes80ZjI8S6SPppbzhymOkwAtStM5yV9mY05TtFf13d1eTrH3-KKvB4ZR4UKth0BsUfZi7-mqdEDGzzqvR0phB&openid.identity=https%3A%2F%2Fwww.amazon.co.jp%2Fap%2Fid%2Famzn1.account.AFHNBAGEUJV2HHW7VGHQWQQDYSTA&openid.op_endpoint=https%3A%2F%2Fwww.amazon.co.jp%2Fap%2Fsignin&openid.pape.auth_time=2019-02-23T14%3A30%3A28Z&openid.signed=assoc_handle%2CaToken%2Cclaimed_id%2Cidentity%2Cmode%2Cns%2Cop_endpoint%2Cresponse_nonce%2Creturn_to%2Cns.pape%2Cpape.auth_policies%2Cpape.auth_time%2Csigned&openid.return_to=https%3A%2F%2Fwww.amazon.co.jp%2Fmn%2Fdcw%2Fmyx.html%2Fref%3Dkinw_myk_redirect&openid.assoc_handle=jpamazon&serial=&openid.mode=id_res&openid.ns.pape=http%3A%2F%2Fspecs.openid.net%2Fextensions%2Fpape%2F1.0&openid.pape.auth_policies=http%3A%2F%2Fschemas.openid.net%2Fpape%2Fpolicies%2F2007%2F06%2Fnone&openid.sig=yaMhuvbR7x0CEGCXsA6WxI1qjezDZhjzRpLD4UU%2F7l4%3D&openid.claimed_id=https%3A%2F%2Fwww.amazon.co.jp%2Fap%2Fid%2Famzn1.account.AFHNBAGEUJV2HHW7VGHQWQQDYSTA&openid.response_nonce=2019-02-23T14%3A30%3A28Z3241158664292099312&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0#/home/content/booksAll/dateDsc/")
(defbookmark reactstrap "http://reactstrap.github.io/")
(defbookmark slack-emoji "https://catallaxy-dev.slack.com/customize/emoji")
(defbookmark green "https://www.green-japan.com/client/top")
;; AMG
(defbookmark wsm3 "https://wsm3.wealthbridgeasia.com/WSM/web/announcement/announcement.jsp")
(defbookmark standard-life "https://www.standardlife.hk/broker/advisor_home.aspx?module_id=MO28&sub_module_id=SUB2801&func_id=FN280101&lang=en")
(defbookmark bosyu "https://bosyu.me/")
(defbookmark admin.google "https://admin.google.com/ac/users")
;; Now — Global Serverless Deployments
(defbookmark zeit.now "https://zeit.co/now")
;; graphql
(defbookmark graphql-cheetsheet "https://devhints.io/graphql")
;; design tool
(defbookmark figma "https://www.figma.com/files/recent")
;; flow-chart tool
(defbookmark flowchart "https://www.draw.io/")
(defbookmark rds "https://ap-northeast-1.console.aws.amazon.com/rds/home?region=ap-northeast-1")
(defbookmark meishi-drive "https://drive.google.com/drive/u/0/folders/1QP1yweumLyeBF-uBQFMX8MSbtzOVNd1L")
(defbookmark amazon-order-history "https://www.amazon.co.jp/gp/your-account/order-history/ref=b2b_yo_dd_b2b?opt=ab&digitalOrders=1&unifiedOrders=1&selectedB2BGroupKey=B2B%3AA116XQM0ACF8JP")
; https://medium.com/@usonesinbetween/2017-the-year-of-the-blob-a3d899c9b071
(defbookmark blobmaker "https://www.blobmaker.app/")
(defbookmark icons8 "https://icons8.com/icons")
(defbookmark jinzai-saiyou "https://docs.google.com/spreadsheets/d/1Bq0zfF53OGdKYVdH9s1FUQSO4D1qoQ-2QGoW33okCWE/edit#gid=0")
(defbookmark firebase "https://console.firebase.google.com/u/0/")
(defbookmark wordmark.it "https://wordmark.it/")
(defbookmark ec2 "https://ap-northeast-1.console.aws.amazon.com/ec2/v2/home?region=ap-northeast-1#Home:")
(defbookmark shihon-seisaku "https://docs.google.com/spreadsheets/d/1X9px54JxFnYC_iB1xi9p3QNRTsTOok_7p_R8sAMvbzU/edit#gid=1425162395")
(defbookmark projects "https://mitsu-ri.net/projects")
(defbookmark admin-projects "https://app.mitsu-ri.net/admin/projects")
(defbookmark letoile "https://hkcapsule.com/letoiledemer/reservation/cwb/")
(defbookmark lp-keywords "https://docs.google.com/spreadsheets/d/1_NC0PF9jdL0QkdNyLds4TsHwTTuNqXONEqnJgByWhSs/edit#gid=0")
(defbookmark lp-cvr "https://ads.google.com/aw/landingpages?ocid=141461355&euid=147174915&__u=9530577835&uscid=141461355&__c=7323965395&authuser=0")
(defbookmark jigyo-keikaku "https://docs.google.com/spreadsheets/d/1aHSyHuCt6PkDHldTwl9kntNNOESdq8T6VL84qCacXWI/edit#gid=1914404350")
(defbookmark koukoku-sheet "https://docs.google.com/spreadsheets/d/1J63S0WD7rJwdHsjAqTsXRNxwiEyvvi25JDbiaMgrFwo/edit#gid=0")
(defbookmark autodraw "https://www.autodraw.com/")
(defbookmark presentations/new "https://presentation.new")
(defbookmark agent-bank "https://company.agent-bank.com/home")
(defbookmark forms/new "https://forms.new")
(defbookmark adwords "https://ads.google.com/aw/overview?ocid=141461355&__c=7323965395&authuser=0&__u=9530577835")
(defbookmark yss "https://promotionalads.business.yahoo.co.jp/ols/ss/accounts/1100859/campaigns/#/")
(defbookmark mitsuri-suuji "https://docs.google.com/spreadsheets/d/1s3pQGxDPkIJVZ-Qj1lEybI72g2c0zOJqy_qPapfT9g0/edit#gid=906607453")
(defbookmark totsuzenshi "http://totuzennosi.sacnoha.com/")
(defbookmark playok "https://www.playok.com/ja/reversi/#")
(defbookmark apo-sheet "https://docs.google.com/spreadsheets/d/1Kz2_-rANEAMt7ZIe1zDlxP_epJkEYDX_47edSKN0mDc/edit#gid=0")
(defbookmark careertrek "https://cr.careertrek.com/")
(defbookmark times-car "https://plus.timescar.jp/view/member/mypage.jsp")
(defbookmark bitly "https://bitly.com/")
(defbookmark bs "https://biz.moneyforward.com/books/tb?cti=NK3E9bIaME2k7dd9WKRndw#bs")
(defbookmark pl "https://biz.moneyforward.com/books/tb?cti=NK3E9bIaME2k7dd9WKRndw#pl")
(defbookmark incoming-webhooks "https://catallaxy-dev.slack.com/apps/A0F7XDUAZ-incoming-webhooks")
(defbookmark twitter-fabit "https://twitter.com/fabit_net")
(defbookmark messanger "https://www.messenger.com/t/")
(defbookmark miidas "https://corp.miidas.jp/dashboard")
(defbookmark scrapbox-icons "https://scrapbox.io/icons/")
(defbookmark glit "https://glit.io/enterprise/home")
(defbookmark okane "https://biz.moneyforward.com/books?utf8=%E2%9C%93&cti=NK3E9bIaME2k7dd9WKRndw&order_list=order%2Corder_number&page_limit=50&selected_dr_sub_item_id=&selected_cr_sub_item_id=&number=&recognized_at_from=2018%2F01%2F01&recognized_at_to=2018%2F12%2F31&journal_type_id=&tag_id=&value_min=&value_max=&remark=&dr_item_id=&dr_sub_item_id=&dr_excise_id=&cr_item_id=&cr_sub_item_id=&cr_excise_id=&order=desc&order_number=desc&page_limit=200&page_num=1&order=desc&order_number=asc")
(defbookmark scrapbox "https://scrapbox.io/catallaxy/")
(defbookmark scrapbox/new "https://scrapbox.io/catallaxy/new")
(defbookmark spreadsheets/new "https://spreadsheet.new")
(defbookmark catallaxy-blog "https://catallaxy.me/blog/")
(defbookmark yammer "https://www.yammer.com/catallaxy.me/#/home?type=my_all")
(defbookmark catallaxy-youtube "https://www.youtube.com/channel/UC6AHOkmkQM0vd6ta1ECpGbw/videos")
(defbookmark engineer-asana "https://app.asana.com/0/1201697459678571/list")
(defbookmark today-asana "https://app.asana.com/0/search/885246940553594/885246940553594")
(defbookmark recent-asana "https://app.asana.com/0/search/885212827511459/885212827511459")
(defbookmark amazon-photos "https://www.amazon.co.jp/photos")
(defbookmark akaura "https://docs.google.com/presentation/d/1WpEtxfhzsomyCUBToO1aZ7ITXhP3oKgXv2st52MBwI4/edit")
(defbookmark my-task "https://app.asana.com/0/464419593324309/list")
(defbookmark orico "https://my.orico.co.jp/eorico/login.do")
(defbookmark whereby-catallaxy "https://whereby.com/catallaxy")
(defbookmark whereby-ohishi "https://whereby.com/ohishi")
(defbookmark meet.google.com "https://meet.google.com/ure-sgwk-taj")
(defbookmark stopwatch "https://garakutabako.jp/timer/")
(defbookmark misumi "https://jp.misumi-ec.com/")
(defbookmark wantedly "https://www.wantedly.com/")
(defbookmark visasq "https://service.visasq.com/")
(defbookmark forms "https://docs.google.com/forms/u/0/?tgif=d")
(defbookmark nishinakensetsu "http://www.nishinakensetsu.jp/")
(defbookmark kenko-shindan "https://docs.google.com/spreadsheets/d/1CqmilC6pIIt7MhPHHyOgIQPXpp83wUwVyPoHJRQLriw/edit#gid=1616721011")
(defbookmark team-twitter "https://twitter.com/hiroaki_ohishi/lists/list")
(defbookmark evernote "https://www.evernote.com")
(defbookmark passwords "https://catallaxy.esa.io/posts/20")
(defbookmark meishi21 "https://www.meishi21.jp/")
(defbookmark imgur "https://imgur.com/")
(defbookmark tasks "https://www.notion.so/catallaxy/8902cec85c44416e998a38bbfcc7577a")
(defbookmark documents "https://www.notion.so/catallaxy/faf6fba271b245a18bc0b70a5298b0b3")
(defbookmark twilio "https://jp.twilio.com/console")
(defbookmark kessan-kibela "https://catallaxy.kibe.la/notes/507")
(defbookmark kessan "https://biz.moneyforward.com/bs")
(defbookmark baidu "https://www.baidu.com/")
(defbookmark sketchboard "https://sketchboard.io/")
(defbookmark tutorial "https://catallaxy.kibe.la/notes/06.%E7%B7%8F%E5%8B%99/338")
(defbookmark drive "https://drive.google.com/drive/u/0/folders/0AKZ00d7ofr2VUk9PVA")
(defbookmark yamada-youtube "https://www.youtube.com/results?search_query=%E5%B1%B1%E7%94%B0%E5%93%B2%E4%BA%BA")
(defbookmark newcomer "https://scrapbox.io/catallaxy/%E5%BF%85%E8%AA%AD")
(defbookmark yenta "https://yenta.talentbase.io/yenta/matchings")
(defbookmark resize-image "https://bulkresizephotos.com/")
(defbookmark shutterstock "https://www.shutterstock.com/ja/")
(defbookmark bankin "https://bankin.work")
(defbookmark nikkan-metal-daily "http://www.japanmetaldaily.com/")
(defbookmark keep "https://keep.google.com/")
(defbookmark docs "https://docs.google.com/document/u/0/")
(defbookmark issues "https://github.com/catallaxy-dev/fabit/issues")
(defbookmark basic "https://scrapbox.io/catallaxy/%E3%83%99%E3%83%BC%E3%82%B7%E3%83%83%E3%82%AF")
(defbookmark bgm "https://www.youtube.com/watch?v=hUjRuVhJ_4o")
(defbookmark hackmd "https://hackmd.io/recent")
(defbookmark todo "https://hackmd.io/MVeDpx6GShOFeCoFvri8_g?both")
(defbookmark hackmd/new "https://hackmd.io/new")
(defbookmark voltechno "https://voltechno.com/blog/")
(defbookmark yelp "https://www.yelp.co.jp/")
(defbookmark aperza "https://www.aperza.jp/")
(defbookmark cotobox "https://cotobox.com/app/search")
(defbookmark cocolocala "https://www.cocolocala.jp/")
(defbookmark ethereum-blog "http://individua1.net/")
(defbookmark openmaker "http://openmaker.eu/")
(defbookmark chachart "http://chachart.net/")
(defbookmark blockchain "https://blockchain.info/ja")
(defbookmark fax-flyer "https://faxflyer.net/")
(defbookmark design-prinsiples "https://principles.design/")
(defbookmark launchaco "https://www.launchaco.com/")
(defbookmark color-scheme "http://logomak.com/")
(defbookmark photo-retouch "http://www.imageinapp.com/")
(defbookmark api-test "https://apitester.com/")
(defbookmark pixabay "https://pixabay.com/")
(defbookmark book-youyaku "https://flierinc.com/summary/list")
(defbookmark webslides "https://webslides.tv/demos/components")
(defbookmark netlify "https://www.netlify.com/")
(defbookmark unsplash "https://unsplash.com/")
(defbookmark tabelog "https://tabelog.com/")
(defbookmark undraw "https://undraw.co/")
(defbookmark zenchin "http://www.zenchin.com/")
(defbookmark couchsurfing "https://www.couchsurfing.com/")
(defbookmark theeconomist "https://www.economist.com/")
(defbookmark pinterest "https://www.pinterest.jp/")
(defbookmark reducego "https://reducego.jp/")
(defbookmark instagram "https://www.instagram.com/")
(defbookmark airbnb-hk "https://www.airbnb.jp/s/%E9%A6%99%E6%B8%AF/homes?refinement_paths%5B%5D=%2Fhomes&allow_override%5B%5D=&price_max=3131&ne_lat=22.38991370138454&ne_lng=114.27912245739253&sw_lat=22.151519634447645&sw_lng=114.06935225475581&zoom=12&search_by_map=true&s_tag=Un7LPj8w")
(defbookmark sakura-vps "https://vps.sakura.ad.jp/")
(defbookmark airbnb "https://www.airbnb.jp/")
(defbookmark kuramae-ryoen "https://kuramae-ryoen.jp")
(defbookmark publickey "http://www.publickey1.jp/")
(defbookmark whereby "https://whereby.com/")
(defbookmark naminori-johnny "http://ibipi.com/song/-Naminori-Johnny-Keisuke-Kuwata-pZW6IEI8U.html")
(defbookmark hokosha-yusen "http://ibipi.com/song/-Hokousha-Yuusen-Yuzu-pZWZBWU70.html")
(defbookmark manatsu-no-kajitsu "http://ibipi.com/song/-Manatsu-No-Kajitsu-Southern-All-Stars-pZWZB68OW.html")
(defbookmark mugendai "https://www.mugendai-web.jp/")
(defbookmark gizmode "https://www.gizmodo.jp/")
(defbookmark somos "https://somos.sg/")
(defbookmark peing "https://peing.net/")
(defbookmark nikkei "https://www.nikkei.com/")
(defbookmark digiday "http://digiday.jp/")
(defbookmark markezine "https://markezine.jp/")
(defbookmark 10plate "https://10plate.io/")
(defbookmark webfolio "http://websv.info/")
(defbookmark trendy "http://trendy.nikkeibp.co.jp/")
(defbookmark ryoko-net "http://www.ryoko-net.co.jp/")
(defbookmark veltra "https://www.veltra.com/jp")
(defbookmark chinapass "https://chinapass.jp/")
(defbookmark dmagazine "https://magazine.dmkt-sp.jp/")
(defbookmark itmedia-news "http://www.itmedia.co.jp/news/")
(defbookmark tabitatsu-magazine "https://tabitatsu.jp/magazine/")
(defbookmark travelvision "http://www.travelvision.jp/")
(defbookmark cnet "https://japan.cnet.com/")
(defbookmark mangamura "http://mangamura.org/")
(defbookmark travelzoo "https://www.travelzoo.com/jp/")
(defbookmark tabilabo "http://tabi-labo.com/")
(defbookmark tabizine "http://tabizine.jp/")
(defbookmark webintravel "http://www.webintravel.com/")
(defbookmark pedia "https://thepedia.co/")
(defbookmark honichi-labo "https://honichi.com/")
(defbookmark lifehacker "https://www.lifehacker.jp/")
(defbookmark service-safari "https://www.service-safari.com/")
(defbookmark hongkong-keizai "https://hongkong.keizai.biz/")
(defbookmark digima-news "https://www.digima-news.com/")
(defbookmark startup-stash "http://startupstash.com/")
(defbookmark record-china "http://www.recordchina.co.jp/")
(defbookmark jnto "https://www.jnto.go.jp/jpn/")
(defbookmark newspicks "https://newspicks.com/")
(defbookmark diamond "http://diamond.jp/")
(defbookmark business+it "https://www.sbbit.jp/")
(defbookmark prtimes "https://prtimes.jp/")
(defbookmark travelvoice "https://www.travelvoice.jp/")
(defbookmark google-alerts "https://www.google.co.jp/alerts")
(defbookmark kibela "https://catallaxy.kibe.la/")
(defbookmark techwave "http://techwave.jp/")
(defbookmark thestartup "http://thestartup.jp/")
(defbookmark thebridge "http://thebridge.jp/")
(defbookmark web-design-sample "https://io3000.com/")
(defbookmark free-design-resources "https://www.nxworld.net/material/free-design-resources.html")
(defbookmark optimizilla "http://optimizilla.com/ja/")
(defbookmark materialize-css "http://materializecss.com/")
(defbookmark material-icons "https://material.io/icons/")
(defbookmark honyaku "https://translate.google.co.jp/?hl=ja")
(defbookmark hinative "https://hinative.com/ja")
(defbookmark lang8 "http://lang-8.com/")
(defbookmark bulma-cdn "https://cdnjs.com/libraries/bulma")
(defbookmark imitsu "https://imitsu.jp/")
(defbookmark stripe "https://stripe.com/jp")
(defbookmark muuuuu "http://muuuuu.org/")
(defbookmark backlog-sumama "https://jiraffe.backlog.jp/find/SUMAMA?condition.projectId=53437&condition.issueTypeId=&condition.componentId=&condition.versionId=&condition.fixedVersionId=&condition.statusId=1&condition.statusId=2&condition.statusId=3&condition.priority=&condition.assignerId=71533&condition.createdUserId=&condition.resolutionId=&condition.file=&condition.parentChildIssue=&condition.limit=20&condition.offset=0&condition.query=&condition.sort=UPDATED&condition.order=false&condition.simpleSearch=true&condition.allOver=false&condition.createdRange.begin=&condition.createdRange.end=&condition.updatedRange.begin=&condition.updatedRange.end=&condition.startDateRange.begin=&condition.startDateRange.end=&condition.limitDateRange.begin=&condition.limitDateRange.end=")
(defbookmark takewari "http://www.takewari.com/")
(defbookmark esa/new "https://catallaxy.esa.io/posts/new")
(defbookmark github-catallaxy "https://github.com/catallaxy-dev")
(defbookmark bo-excel "https://docs.google.com/spreadsheets/d/1ufCI99XRN7wrluFdjBO5oPAZPKWtN3igYbGIh6G_yFM/edit?ts=581985f6#gid=0")
(defbookmark irasutoya "http://www.irasutoya.com/")
(defbookmark web-design-lyric "http://kenyo--c.com/")
(defbookmark material-design-pallete "https://www.materialpalette.com/")
(defbookmark portfolio2 "http://casis.ml/")
(defbookmark portfolio1 "http://umehara.ga/")
(defbookmark free-domain "https://my.freenom.com/")
(defbookmark pawlevans "https://www.paulevansny.com/")
(defbookmark albatros "http://demo-albatros.open-cage.com/")
(defbookmark dummy "https://webtools.dounokouno.com/dummytext/")
(defbookmark bulma "http://bulma.io/documentation/overview/start/")
(defbookmark box-shadow "http://www.bad-company.jp/box-shadow/")
(defbookmark storesjp "https://stores.jp/category")
(defbookmark awwwards "https://www.awwwards.com/")
(defbookmark designudge "https://designudge.org/ja/stories/1449068969350_c0aca4d0/")
(defbookmark timepot "https://www.timepot.io/")
(defbookmark squarespace "https://www.squarespace.com/")
(defbookmark satori "https://satori.marketing/")
(defbookmark clojure-style-guide "https://github.com/bbatsov/clojure-style-guide")
(defbookmark indzz "https://indzz.com/en/")
(defbookmark google-hk "https://google.com.hk")
(defbookmark google-jp "https://google.co.jp")
(defbookmark backlog-moyashi "https://jiraffe.backlog.jp/find/MOYASHI?condition.projectId=31876&condition.issueTypeId=&condition.componentId=&condition.versionId=&condition.fixedVersionId=&condition.statusId=1&condition.statusId=2&condition.statusId=3&condition.priority=&condition.assignerId=71533&condition.createdUserId=&condition.resolutionId=&condition.file=&condition.parentChildIssue=&condition.limit=20&condition.offset=0&condition.query=&condition.sort=UPDATED&condition.order=false&condition.simpleSearch=true&condition.allOver=false&condition.createdRange.begin=&condition.createdRange.end=&condition.updatedRange.begin=&condition.updatedRange.end=&condition.startDateRange.begin=&condition.startDateRange.end=&condition.limitDateRange.begin=&condition.limitDateRange.end=")
(defbookmark maven "https://mvnrepository.com/artifact/com.cloudinary/cloudinary-core/1.9.1")
(defbookmark uswitch "https://www.uswitch.com/")
(defbookmark d "https://duckduckgo.com/")
(defbookmark guideline "https://support.google.com/webmasters/answer/35769?hl=ja")
(defbookmark keiyakusho "https://docs.google.com/document/d/1nz-AvOGSh_o17P47F0cah1pwUKgZBDBFdbBl-XOhFe8/edit")
(defbookmark namaz "http://namaz.jp/")
(defbookmark panguin "https://barracuda.digital/panguin-seo-tool/")
(defbookmark midashi "http://saruwakakun.com/html-css/reference/h-design")
(defbookmark circleci "https://circleci.com/")
(defbookmark data-tengoku "http://mt-kachikachi.com/wordpress/")
(defbookmark kurachic "https://www.kurachic.jp/")
(defbookmark website-informer "http://website.informer.com/")
(defbookmark html2slim "https://html2slim.herokuapp.com/")
(defbookmark backlog "http://www.backlog.jp/")
(defbookmark jinkou-zouka-map "http://ktgis.net/lab/etc/pop_increase/")
(defbookmark twitter-search "http://t-proj.com/twitter/")
(defbookmark icon-rainbow "http://icon-rainbow.com/")
(defbookmark rakumachi "http://www.rakumachi.jp/")
(defbookmark tryclj "http://www.tryclj.com/")
(defbookmark dev.breeder-one "https://dev.breeder-one.jp")
(defbookmark snaplog "https://snaplog.jp")
(defbookmark muumuu-domain "https://muumuu-domain.com/?mode=conpane")
(defbookmark min-breeder "https://www.min-breeder.com/")
(defbookmark moyashi "http://saiyasu-syuuri.com/")
(defbookmark ishamachi "https://www.ishamachi.com/")
(defbookmark netprint "https://networkprint.ne.jp/sharp_netprint/en/top.aspx")
(defbookmark snapshop "https://snapshop.jp")
(defbookmark moz-ose "https://moz.com/researchtools/ose")
(defbookmark pixta "https://pixta.jp/")
(defbookmark icomoon "https://icomoon.io/")
(defbookmark mansion-note "https://www.mansion-note.com/")
(defbookmark gtmetrix "https://gtmetrix.com/")
(defbookmark tonikakuyoshi "https://camo.githubusercontent.com/72653c4233b58ca7ef45355803d193eec1c2f4a1/687474703a2f2f63646e2d616b2e662e73742d686174656e612e636f6d2f696d616765732f666f746f6c6966652f772f776173686275726e313937352f32303131303131392f32303131303131393232303430372e6a7067")
(defbookmark refiddle "http://refiddle.com/refiddles/57f6056375622d0630d05b00")
(defbookmark aws "https://aws.amazon.com/jp/")
(defbookmark mailtrap "https://mailtrap.io/")
(defbookmark asana "https://app.asana.com/0/home/464419593318082")
(defbookmark yodobashi "http://www.yodobashi.com/")
(defbookmark ferret "https://cw.ferret-plus.com/mypages")
(defbookmark utapedia "http://utapedia.com/")
(defbookmark homes "http://www.homes.co.jp/")
(defbookmark geomedian "https://supermarket.geomedian.com/")
(defbookmark web-page-test "http://www.webpagetest.org/")
(defbookmark pagespeed "https://developers.google.com/speed/pagespeed/insights/?hl=ja")
(defbookmark alexa "http://www.alexa.com/")
(defbookmark crowdworks "https://crowdworks.jp/")
(defbookmark cloudinary "https://cloudinary.com/console/media_library/folders/all/")
(defbookmark lgtmin "http://lgtm.in/")
(defbookmark sachico "https://www.google.com/webmasters/tools/home?hl=ja")
(defbookmark flat-icon2 "http://www.webalys.com/")
(defbookmark chatwork "https://www.chatwork.com/")
(defbookmark number333 "http://number333.org/")
(defbookmark kubota "http://www.kubotayousetsu.co.jp/")
(defbookmark seiden "http://www.seidenkogyo.co.jp/news")
(defbookmark button "http://tympanus.net/Development/CreativeButtons/")
(defbookmark wine-library "https://winelibrary.com/")
(defbookmark mailgun "http://www.mailgun.com/")
(defbookmark onamae "http://www.onamae.com/advanced/")
(defbookmark exsia "http://exsia.jp/")
(defbookmark kakaku-com "http://kakaku.com/")
(defbookmark mameo "http://www.ac-illust.com/main/profile.php?id=Sad5ohvR&area=1")
(defbookmark akiya-support "http://akiya-support-center.com/")
(defbookmark photo-ac "http://www.photo-ac.com/")
(defbookmark newrelic "https://rpm.newrelic.com/")
(defbookmark mufg "https://direct11.bk.mufg.jp/ib/dfw/APL/bnkib/banking?_TRANID=AE041_001")
(defbookmark hikakaku "http://hikakaku.com/")
(defbookmark mfcloud "https://accounting.moneyforward.com/home")
(defbookmark misoca "https://app.misoca.jp/invoices/")
(defbookmark net-print "https://www.printing.ne.jp/")
(defbookmark catallaxy "http://catallaxy.me")
(defbookmark respectfull "https://respectfull.net")
(defbookmark room-trunk "http://room.trunk.fm/")
(defbookmark waffle "https://waffle.io/")
(defbookmark web-kei "http://zeller-lab.com/img-width/")
(defbookmark josei-bigaku "http://josei-bigaku.jp/")
(defbookmark togech "http://togech.jp/")
(defbookmark hapisupu "http://hapisupu.com/")
(defbookmark sanmarie "http://sanmarie.me/")
(defbookmark kabupedia "http://kabupedia.com")
(defbookmark miny-tokyo "http://miny.tokyo/")
(defbookmark rankingshare "https://www.rankingshare.jp/")
(defbookmark list25 "http://list25.com/")
(defbookmark monkey "http://mnky.jp/")
(defbookmark word-counter "https://sundryst.com/convenienttool/strcount.html")
(defbookmark kuniguni "http://www.kuniguni.com/")
(defbookmark rankers "http://the-rankers.com/")
(defbookmark en-park "http://en-park.net/")
(defbookmark similarweb "http://www.similarweb.com/")
(defbookmark 5seconds "http://the5seconds.com/")
(defbookmark creive "http://creive.me")
(defbookmark icooon "http://icooon-mono.com/")
(defbookmark ashinari "http://www.ashinari.com/")
(defbookmark pexels "https://www.pexels.com/")
(defbookmark illustration "http://www.ac-illust.com/main/profile.php?id=puchy&area=1")
(defbookmark omocoro "http://omocoro.jp/")
(defbookmark codic "https://codic.jp/engine")
(defbookmark photo "http://liginc.co.jp/web/design/material/36659")
(defbookmark flat-icon-design "http://flat-icon-design.com")
(defbookmark sekai-kabuka "http://sekai-kabuka.com/")
(defbookmark isho "http://catallaxy.me")
(defbookmark logo-font "http://co-jin.net/design/font/freefont-logo-design")
(defbookmark lancers "http://www.lancers.jp/")
(defbookmark betterdays "http://betterdays.life")
(defbookmark goodkeyword "http://goodkeyword.net/")
(defbookmark heroku "https://www.heroku.com/")
(defbookmark flat-ui-colors "http://www.flatuicolorpicker.com/")
(defbookmark font-awesome-cheatsheet "http://fortawesome.github.io/Font-Awesome/cheatsheet/")
(defbookmark wercker "https://app.wercker.com/")
(defbookmark clojure "http://clojure.org/cheatsheet")
(defbookmark pocket "https://getpocket.com/a/queue/")
(defbookmark finance-com "http://finance.yahoo.com")
(defbookmark w-index "http://www.w-index.com/")
(defbookmark zerohedge "http://zerohedge.com")
(defbookmark matome "matome.naver.jp")
(defbookmark gigazine "http://gigazine.net")
(defbookmark amazon "http://www.amazon.co.jp")
(defbookmark yammer "https://www.yammer.com")
(defbookmark gitlab "https://gitlab.actindi.net/")
(defbookmark rails-api "http://api.rubyonrails.org/")
(defbookmark blogos "http://blogos.com/")
(defbookmark jorudan "http://jorudan.co.jp")
(defbookmark tenki "http://weather.yahoo.co.jp/weather/jp/13/4410.html")
(defbookmark tenki-fukuoka "https://weather.yahoo.co.jp/weather/jp/40/8210.html")
(defbookmark r "https://its.actindi.net/issues?per_page=50&query_id=43")
(defbookmark feedly "http://feedly.com")
(defbookmark outing "https://github.com/actindi-dev/outing")
(defbookmark asg "http://asg.to/search?q=&x=52&y=17&searchVideo=true&searchPhoto=true&age=week&minimumLength=5&sort=votes&searchCategory=any")
(defbookmark bitbucket "https://bitbucket.org")
(defbookmark github "https://github.com")
(defbookmark calendar "https://www.google.com/calendar/render?hl=ja")
(defbookmark rocketnews24 "http://rocketnews24.com/")
(defbookmark youtube "http://youtube.com")
(defbookmark youtube/new "https://studio.youtube.com/channel/UCjqIWi3Kw26G2SEoUfsJ-Mg/videos/upload?d=ud&filter=%5B%5D&sort=%7B%22columnType%22%3A%22date%22%2C%22sortOrder%22%3A%22DESCENDING%22%7D")
(defbookmark wiki "http://wikipedia.org")
(defbookmark measis "https://www.measis.jp/shop/customer/menu.aspx")
(defbookmark hatena "http://b.hatena.ne.jp")
(defbookmark twitter "http://twitter.com")
(defbookmark facebook "http://www.facebook.com")
(defbookmark reuters "http://www.reuters.com/")
(defbookmark bloomberg "http://bloomberg.com")
(defbookmark google "http://www.google.co.jp")
(defbookmark market "http://www.bloomberg.com/markets/")
(defbookmark share "https://sites.google.com/a/actindi.net/share/")
(defbookmark gunosy "http://gunosy.com/")
(defbookmark amagumo "http://weather.yahoo.co.jp/weather/zoomradar/")
(defbookmark pol "http://protect-our-liberty.org")
(defbookmark bi "http://www.businessinsider.com/")
(defbookmark businessinsider "http://www.businessinsider.com/")
(defbookmark hacker "https://news.ycombinator.com/")
(defbookmark cnbc "http://www.cnbc.com/id/100746255?region=world")
(defbookmark dropbox "https://www.dropbox.com")
; https://www1.shalom-house.jp/komon/login.aspx
(defbookmark techcrunch "http://jp.techcrunch.com/")
(defbookmark smbc "http://www.smbc.co.jp")
(defbookmark gmap "https://maps.google.co.jp/")
(defbookmark btv "http://www.bloomberg.com/tv/")
(defbookmark mr "http://54.200.167.178:3000")
(defbookmark shift "https://docs.google.com/a/actindi.net/spreadsheet/ccc?key=0AvdpmLSse9ZhdE5xREFPODhxM3NINkU0UTdzLURMZ2c#gid=6")
(defbookmark rails-style-guide "https://github.com/miyamae/rails-style-guide")
(defbookmark git-flow "http://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html")
(defbookmark baseball "https://baseball.yahoo.co.jp/npb/")
(defbookmark format-recipe-lisp "http://www.gigamonkeys.com/book/a-few-format-recipes.html")
(defbookmark loop-recipe-lisp "http://www.gigamonkeys.com/book/loop-for-black-belts.html")
(defbookmark 2ch "http://2ch.net")
(defbookmark aeon "https://www.aeonnetshop.com/shop/default.aspx")
(defbookmark jreast "https://www.jreast.co.jp/card/")
(defbookmark eigyo "https://docs.google.com/a/actindi.net/spreadsheet/ccc?key=0AlMU83PaBnfcdFA1OXlLOXg2RlJ4dVpmMENGaVVHdEE&usp=drive_web#gid=0")
(defbookmark eiger "https://www.eiger.io/")
(defbookmark thingiverse "https://www.thingiverse.com/")
(defbookmark ruby-coding-rule "https://gitlab.actindi.net/styleguide/styleguide/blob/master/ruby.ja.md")
(defbookmark analytics "https://analytics.google.com/analytics/web")
(defbookmark munin "http://munin.actindi.net/munin-cgi/munin-cgi-html/iko-yo.net/mx.iko-yo.net/index.html")
(defbookmark free-sozai "http://liskul.com/highquality-iconillust-free-2240")
(defbookmark frog "https://frogindi.herokuapp.com/")
(defbookmark satsui "http://matome.naver.jp/odai/2138405464422800001")
(defbookmark adsense "https://www.google.com/adsense/app#viewreports/d=alltime&ag=month&dd=&ss=&oo=descending&gm=earnings&co=d&drh=false&ct=tm&oet=&ert=&se=&uim=d&tz=a&oc=earnings")
(defbookmark horiemon "http://horiemon.com/")
(defbookmark uriage "https://app.mitsu-ri.net/admin/sales")
(defbookmark sales "https://app.mitsu-ri.net/admin/sales")
(defbookmark activity "https://app.mitsu-ri.net/admin/activity")
(defbookmark trends "https://www.google.co.jp/trends/")
(defbookmark twib "http://twib.jp/")
(defbookmark travelco "http://www.tour.ne.jp/w_travel/")
(defbookmark clojars "https://clojars.org/")
(defbookmark twitter-news-list "https://twitter.com/hiroaki_ohishi/lists/news")
(defbookmark yarn-cheatsheet "https://qiita.com/morrr/items/558bf64cd619ebdacd3d")
(defbookmark frame-illust "http://frame-illust.com/?p=6744")
(defbookmark amp "https://amp.review/")
(defbookmark fabcross "https://fabcross.jp/")
(defbookmark monoist "http://monoist.atmarkit.co.jp/")
(defbookmark tweetdeck "https://tweetdeck.twitter.com/")
(defbookmark aperza-news "https://news.aperza.jp/")
(defbookmark tokyo-cci "http://www.tokyo-cci.or.jp/")
(defbookmark share-cycles "https://www.google.com/maps/d/u/0/viewer?mid=1L2l1EnQJhCNlm_Xxkp9RTjIj68Q&ll=35.67191748291666%2C139.7397770783149&z=16")
(defbookmark shirofuwabin "https://www.shirofuwabin.jp/")
(defbookmark startup "https://twitter.com/hiroaki_ohishi/lists/startup")
(defbookmark linkedin "https://www.linkedin.com/feed/")
(defbookmark twitter-tenshoku "https://twitter.com/search?q=%23Twitter%E8%BB%A2%E8%81%B7&src=typeahead_click")
(defbookmark wishlist "https://www.amazon.co.jp/hz/wishlist/ls/21KSDGLES1XEN?ref_=wl_share")
(defbookmark gmail "https://mail.google.com/mail/u/0")
(defbookmark gmail-star "https://mail.google.com/mail/u/0/#starred")
(defbookmark gmail-sent "https://mail.google.com/mail/u/0/#sent")
(defbookmark hongkong-news "https://www.google.co.jp/search?q=%E9%A6%99%E6%B8%AF&source=lnms&tbm=nws&sa=X&ved=0ahUKEwj3v9a6gPzhAhVJS7wKHbZJB1oQ_AUIECgD&biw=1920&bih=895")
(defbookmark contract-employee "https://docs.google.com/document/d/1nz-AvOGSh_o17P47F0cah1pwUKgZBDBFdbBl-XOhFe8/edit")
(defbookmark contract-parttimer "https://docs.google.com/document/d/1uIlXdqIffYOvtvMmU2KrN_p6Vdz8EI6o265VD5VjQZg/edit")
(defbookmark contract-contractor "https://docs.google.com/document/d/1s6k-M8QFhl2qxGp6Ovb_WRAdPryeZG-8_OXItE8gWrc/edit")
(defbookmark flier "https://www.flierinc.com/")
(defbookmark note "https://note.mu/notes")
(defbookmark stockclip "https://www.stockclip.net/")
(defbookmark notepad "http://www.drpartners.jp/tools/browser-memocho.htm")
(defbookmark yushirodesu "https://twitter.com/yushirodesu")
(defbookmark caddi-twitter "https://twitter.com/caddi_pr")
(defbookmark kyuryo "https://payroll.moneyforward.com/")
(defbookmark kimura-scrapbox "https://scrapbox.io/ltv-km/")
(defbookmark mitsuri-projects-spreadsheet "https://docs.google.com/spreadsheets/d/1QBgewSHSO8BagklhXozRnCSo6ZphlSA8q4O3zjEVx-4/edit#gid=0")
(defbookmark hidane "https://the.hidane.app/home")

(defcommand spreadsheet (id) ((:string "id: "))
  (if (string= id "")
      (run-shell-command (format nil "google-chrome \"https://docs.google.com/spreadsheets/u/0/?tgif=d\""))
      (run-shell-command (format nil "google-chrome \"https://docs.google.com/spreadsheets/d/~a/edit#gid=0\"" id))))


(defcommand ffg-teams () ()
  (run-shell-command (format nil "google-chrome \"https://teams.microsoft.com/meet/499526835258?p=UygeexPReR4ofqtHzp\"")))

(defcommand docs/new () ()
  (run-shell-command (format nil "google-chrome \"https://docs.new\"")))

; 商工会議所会員番号：C2734737

(defcommand nippo () ()
  (multiple-value-bind
      (second minute hour date month year day-of-week dst-p tz)
      (get-decoded-time)
    (run-shell-command
     (format nil "google-chrome \"https://scrapbox.io/catallaxy/~s%2F~s%2F~s\""
             year
             month
             date))))

(defcommand line-test () ()
  (run-shell-command "curl -X POST https://slack.mitsu-ri.net/api/line -d 'text=test by hiroaki'"))

(defcommand yadorigi-yoyaku () ()
  (run-shell-command "curl -X POST https://slack.mitsu-ri.net/api/yadorigi"))

(defcommand futpark-yoyaku () ()
  (run-shell-command "curl -X POST https://slack.mitsu-ri.net/api/futpark"))

(defcommand save-pocket (uri) ((:string "uri: "))
  (run-shell-command (format nil "curl -X POST -d \"consumer_key=85719-bd4e88f059bd0b4bbbfb70fd\" -d \"access_token=3da700eb-848a-8d3e-c0cc-4e9718&username=ohishi%40catallaxy.me\" -d \"url=~a\" https://getpocket.com/v3/add" uri)))


(defcommand mitsuri-suuji-analytics (date) ((:string "date: "))
  (run-shell-command (format nil "google-chrome \"https://analytics.google.com/analytics/web/#/report/visitors-overview/a121895856w179903571p178122544/_u.date00=~a&_u.date01=~a/\"" date date)))

(defcommand mitsuri-suuji-input (date) ((:string "date: "))
  (mitsuri-suuji)
  (mitsuri-suuji-analytics date)
  (yss)
  (adwords)
  (facebook))

(defcommand my-asana () ()
  (asana)
  (run-with-timer 6 nil
                  #'(lambda ()
                      (mouse-move 1530 218)
                      (left-click))))

(defcommand analytics-keywords () ()
  (run-shell-command (format nil "google-chrome \"https://analytics.google.com/analytics/web/#/report/content-event-events/a121895856w179903571p178122544/_u.date00=20190524&_u.date01=20190606&explorer-segmentExplorer.segmentId=analytics.eventLabel&_r.drilldown=analytics.eventCategory:LP_%E8%A6%8B%E7%A9%8D%E5%AE%8C%E4%BA%86&explorer-table.plotKeys=%5B%5D&explorer-table.rowCount=500&explorer-table.secSegmentId=analytics.sourceMedium&explorer-table.rowStart=0/\""))
  (run-shell-command (format nil "google-chrome \"https://analytics.google.com/analytics/web/#/report/content-event-events/a121895856w179903571p178122544/_u.date00=20190524&_u.date01=20190606&explorer-segmentExplorer.segmentId=analytics.eventLabel&_r.drilldown=analytics.eventCategory:LP_%E8%A6%8B%E7%A9%8D%E5%AE%8C%E4%BA%86&explorer-table.plotKeys=%5B%5D&explorer-table.secSegmentId=analytics.keyword&explorer-table.rowCount=100/\""))
  (run-shell-command (format nil "google-chrome \"https://analytics.google.com/analytics/web/#/report/content-event-events/a121895856w179903571p178122544/_u.date00=20190524&_u.date01=20190606&explorer-segmentExplorer.segmentId=analytics.eventLabel&_r.drilldown=analytics.eventCategory:LP_%E8%A6%8B%E7%A9%8D%E5%AE%8C%E4%BA%86&explorer-table.plotKeys=%5B%5D&explorer-table.secSegmentId=analytics.query&explorer-table.rowCount=100/\"")))

(defcommand weblio (word) ((:string "word: "))
  (run-shell-command (format nil "google-chrome \"http://ejje.weblio.jp/content/~a\"" word)))

(defcommand finance (id) ((:string "id: "))
  (if (string= id "")
      (run-shell-command (format nil "google-chrome \"http://finance.yahoo.co.jp\""))
      (run-shell-command (format nil "google-chrome \"http://stocks.finance.yahoo.co.jp/stocks/detail/?code=~a.T\"" id))))

(defcommand metabase (id) ((:string "id: "))
  (if (string= id "")
      (run-shell-command (format nil "google-chrome \"https://metabase.mitsu-ri.net\""))
      (run-shell-command (format nil "google-chrome \"https://metabase.mitsu-ri.net/question/~a\"" id))))

(defcommand dashboard (id) ((:string "id: "))
  (if (string= id "")
      (run-shell-command (format nil "google-chrome \"https://metabase.mitsu-ri.net\""))
      (run-shell-command (format nil "google-chrome \"https://metabase.mitsu-ri.net/dashboard/~a\"" id))))

(defcommand influencerone (path) ((:string "path :"))
  (if (string= path "")
      (run-shell-command (format nil "google-chrome \"https://influencerone.jp\""))
      (run-shell-command (format nil "google-chrome \"https://influencerone.jp/~s\"" path))))

(defcommand iko-yo (path) ((:string "path: "))
  (if (string= path "")
      (run-shell-command (format nil "google-chrome \"http://iko-yo.net\""))
      (run-shell-command (format nil "google-chrome \"http://iko-yo.net/~s\"" path))))

(defcommand fa-bit (path) ((:string "path: "))
  (if (string= path "")
      (run-shell-command (format nil "google-chrome \"https://fa-bit.net\""))
      (run-shell-command (format nil "google-chrome \"https://fa-bit.net/~s\"" path))))

(defcommand mitsu-ri (path) ((:string "path: "))
  (if (string= path "")
      (run-shell-command (format nil "google-chrome \"https://mitsu-ri.net\""))
      (run-shell-command (format nil "google-chrome \"https://mitsu-ri.net/~s\"" path))))

(defcommand project (id) ((:string "id: "))
  (if (string= id "")
      (run-shell-command (format nil "google-chrome \"https://app.mitsu-ri.net/projects\""))
      (run-shell-command (format nil "google-chrome \"https://app.mitsu-ri.net/projects/~s\"" id))))

(defcommand breeder-one (path) ((:string "path: "))
  (if (string= path "")
      (run-shell-command (format nil "google-chrome \"https://breeder-one.jp\""))
      (run-shell-command (format nil "google-chrome \"https://breeder-one.jp/~s\"" path))))

(defcommand hikakaku (path) ((:string "path: "))
  (if (string= path "")
      (run-shell-command (format nil "google-chrome \"http://hikakaku.com\""))
      (run-shell-command (format nil "google-chrome \"http://hikakaku.com/~s\"" path))))

(defcommand ekimap (path) ((:string "path: "))
  (if (string= path "")
      (run-shell-command (format nil "google-chrome \"https://ekimap.com\""))
      (run-shell-command (format nil "google-chrome \"https://ekimap.com/~s\"" path))))

(defcommand trunk (path) ((:string "path: "))
  (if (string= path "")
      (run-shell-command (format nil "google-chrome \"http://trunk.fm\""))
      (run-shell-command (format nil "google-chrome \"http://trunk.fm/~s\"" path))))

(defcommand slack () ()
  (progn
    (run-shell-command (format nil "/usr/bin/slack"))))

(defcommand claude () ()
  (progn
    (run-shell-command (format nil "/usr/bin/claude-desktop"))))

(defcommand teams () ()
  (progn
    (run-shell-command (format nil "/usr/bin/teams"))))

(defcommand teamviewer () ()
  (progn
    (run-shell-command (format nil "/usr/bin/teamviewer"))))

(defcommand camotics () ()
  (progn
    (run-shell-command (format nil "/usr/bin/camotics"))))

(defcommand discord () ()
  (progn
    (run-shell-command (format nil "/usr/bin/discord"))))

(defcommand chrome () ()
  (progn
    (open-chrome)))

(defcommand freecad () ()
  (run-shell-command (format nil "/usr/bin/freecad-daily")))

(defcommand facilities (id) ((:string "id: "))
  (if (string= id "")
      (run-shell-command (format nil "google-chrome \"http://iko-yo.net\""))
      (run-shell-command (format nil "google-chrome \"http://iko-yo.net/facilities/~s\"" id))))

(defcommand factories (id) ((:string "id: "))
  (if (string= id "")
      (run-shell-command (format nil "google-chrome \"https://fa-bit.net\""))
      (run-shell-command (format nil "google-chrome \"https://fa-bit.net/factories/~s\"" id))))

(defcommand esa (id) ((:string "id: "))
  (if (string= id "")
      (run-shell-command (format nil "google-chrome \"https://catallaxy.esa.io/posts\""))
      (run-shell-command (format nil "google-chrome \"https://catallaxy.esa.io/posts/~s\"" id))))

(defcommand product (slug) ((:string "slug: "))
  (if (string= slug "")
      (run-shell-command (format nil "google-chrome \"https://mitsu-ri.net/catalogs/\""))
      (run-shell-command (format nil "google-chrome \"https://mitsu-ri.net/catalogs/products/~s\"" slug))))

(defcommand localhost (port path) ((:string "port: ") (:string "path: "))
  (let ((port (if (equal port "") "80" port)))
    (run-shell-command (format nil "google-chrome \"http://localhost:~a\/\~a\"" port path))))

(defcommand gfeedline () ()
  (run-shell-command "/usr/local/gfeedline/gfeedline"))

(defmacro define-sudo-command (name command &key output)
  (let ((cmd (gensym)))
    `(defcommand ,name (password) ((:password "sudo password: "))
       (let ((,cmd (concat "echo '" password "' | sudo -S " ,command)))
         ,(if output
              `(run-prog-collect-output *shell-program* "-c" ,cmd)
              `(run-prog *shell-program* :args (list "-c" ,cmd) :wait nil))))))

(define-sudo-command reboot "reboot")
(define-sudo-command blueman "blueman-manager")
(define-sudo-command shutdown "shutdown -h now")
(define-sudo-command bright-max "echo 15 | sudo tee /sys/class/backlight/acpi_video0/brightness")
(define-sudo-command bright-middle "echo 10 | sudo tee /sys/class/backlight/acpi_video0/brightness")
(define-sudo-command bright-min "echo 5 | sudo tee /sys/class/backlight/acpi_video0/brightness")


(defcommand g (search-string) ((:string "google: "))
  (unless (string= search-string "NIL")
    (run-shell-command (format nil "google-chrome \"https://google.co.jp/#q=~a\"" search-string))))

(defcommand news (search-string) ((:string "news: "))
  (check-type search-string string)
  (run-shell-command (format nil "google-chrome \"http://www.google.co.jp/search?q=~a&tbm=nws\"" search-string)))

(defcommand gm (id) ((:string "id: "))
  (run-shell-command
   (format nil "google-chrome https://mail.google.com/mail/u/~a/#inbox" id)))

(defcommand p (id) ((:string "slug: "))
  (run-shell-command
   (format nil "google-chrome https://mitsu-ri.net/catalogs/fixme/register/~a" id)))

(defcommand gmail-search (word) ((:string "word: "))
  (run-shell-command
   (format nil "google-chrome https://mail.google.com/mail/u/0/#search/~a" word)))

(defcommand gc (id) ((:string "id: "))
  (run-shell-command
   (format nil "google-chrome https://www.google.com/calendar/b/~a/render" id)))

(defcommand reinit () ()
  (loadrc))

(defcommand b () ()
  (banish))

(defcommand audacious () ()
  (run-shell-command "audacious"))

(define-key *root-map* (kbd "g") "google ")
(define-key *root-map* (kbd ",") "google")

(defun shift-windows-forward (frames win)
  (when frames
    (let ((frame (car frames)))
      (shift-windows-forward (cdr frames)
                             (frame-window frame))
      (when win
        (pull-window win frame)))))

(defcommand swap-windows () ()
  (let* ((frames (group-frames (current-group)))
         (win (frame-window (car (last frames)))))
    (shift-windows-forward frames win)))

(defcommand volume (n) ((:string "volume: "))
  (run-shell-command
   (format nil "amixer set Master ~a%" n)))

(defcommand password () ()
  (run-shell-command (format nil "zsh /home/hiragi/bin/pass.zsh")))

(defcommand ikoutin-password () ()
  (run-shell-command (format nil "zsh /home/hiragi/bin/user_pass.zsh")))

(defcommand ssl-add-exception () ()
  (run-shell-command (format nil "zsh /home/hiragi/bin/ssl_add_exception.zsh")))

(defcommand rails_c () ()
  (run-shell-command (format nil "zsh /home/hiragi/bin/rails_c.zsh")))

(defcommand mail-address () ()
  (run-shell-command "echo sasanoha31@gmail.com | xclip"))

(defcommand copy-slack-channel-link (channel-id) ((:string "ID: "))
  (run-shell-command (format nil "echo -n https://app.slack.com/client/T2WMNE15G/~a | xclip -selection clipboard" channel-id)))

(defcommand copy-schedule () ()
  (run-shell-command "echo -n https://calendar.app.google/Pcyr8PDTo5dYjvhR9 | xclip -selection clipboard"))

(defcommand copy-ffg-password () ()
  (run-shell-command "echo -n 83548354 | xclip -selection clipboard"))

(defcommand copy-email () ()
  (run-shell-command "echo -n ohishi@catallaxy.me | xclip -selection clipboard"))

(defcommand copy-placeholder (size) ((:string "size: "))
  (run-shell-command (format nil "echo -n https://via.placeholder.com/~a | xclip -selection clipboard" size)))

(defcommand copy-email-private () ()
  (run-shell-command "echo -n o8o661646o7@gmail.com | xclip -selection clipboard"))

(defcommand copy-numbers () ()
  (run-shell-command "cat /home/hiroaki/dotfiles/numbers.txt | xclip -selection clipboard"))

(defcommand copy-todai-eigo () ()
  (run-shell-command "cat /home/hiroaki/dotfiles/todai_eigo.txt | xclip -selection clipboard"))

(defcommand copy-katakana () ()
  (run-shell-command "cat /home/hiroaki/dotfiles/katakana.txt | xclip -selection clipboard"))

(defcommand copy-template-movie-description () ()
  (run-shell-command "cat /home/hiroaki/dotfiles/template_movie_description.txt | xclip -selection clipboard"))

(defcommand copy-address () ()
  (run-shell-command "cat /home/hiroaki/dotfiles/address.txt | xclip -selection clipboard"))

(defcommand copy-scout () ()
  (run-shell-command "cat /home/hiroaki/dotfiles/scout.txt | xclip -selection clipboard"))

(defcommand copy-schedule-response () ()
  (run-shell-command "cat /home/hiroaki/dotfiles/schedule-response.txt | xclip -selection clipboard"))

(defcommand copy-ut-board () ()
  (run-shell-command "cat /home/hiroaki/dotfiles/ut-board.txt | xclip -selection clipboard"))

(defcommand copy-green-res () ()
  (run-shell-command "cat /home/hiroaki/dotfiles/green-res.txt | xclip -selection clipboard"))

(defcommand copy-interview-ng () ()
  (run-shell-command "cat /home/hiroaki/dotfiles/interview-ng.txt | xclip -selection clipboard"))

(defcommand kansha () ()
  (let* ((url '("http://blog-imgs-48.fc2.com/s/p/r/springfever999/20120102044842f69.jpg"
                "http://cdn-ak.f.st-hatena.com/images/fotolife/t/tsujimotter/20150116/20150116013708.jpg"
                "http://stat.ameba.jp/user_images/20131117/07/asuka-nagisa/d0/56/j/o0420033612751661498.jpg"
                "http://blog-imgs-58.fc2.com/n/n/k/nnkopeko/hunter111-2.jpg"
                "https://pbs.twimg.com/media/A2CHUUwCYAAzNst.jpg"
                "http://live.nicovideo.jp/thumb/232437.jpg"
                "http://haru.shiriagari.com/kansou/bunrui/SONOTA/kobetu_Battle/HUNTER_HUNTER/gazou/111/1390847758441.jpg"
                "http://blog-imgs-79.fc2.com/i/m/p/imperialmhfg/kaukabeys.jpg"
                "http://blog-imgs-43.fc2.com/r/e/t/retrogame99/20120314234447632.png"))
         (image (nth (random (length url)) url)))
    (run-shell-command (format nil "echo \"![kansha](~a)\" | xclip" image))))

(defcommand zack-lgtm () ()
  (run-shell-command "echo \"![LGTM](http://livedoor.blogimg.jp/yukkuri0616-picture/imgs/1/5/15dad73e-s.gif)\" | xclip"))

(defcommand shiran-lgtm () ()
  (run-shell-command "echo \"![LGTM](http://cdn-ak.f.st-hatena.com/images/fotolife/w/washburn1975/20110119/20110119220407.jpg)\" | xclip"))

(defcommand yaruo-lgtm () ()
  (run-shell-command "echo \"![LGTM](https://camo.githubusercontent.com/9f4dfd6a8fe89ff9aec27774f6b029f860c2c9f9/687474703a2f2f6b616f6d6f6a6963682e636f6d2f77702d636f6e74656e742f75706c6f6164732f796172756f2f796172756f5f30312e676966)\" | xclip"))

(defcommand yaruo-iranai () ()
  (run-shell-command "echo \"[![LGTM](http://kaomojich.com/wp-content/uploads/yaruo/yaruo_10.gif)\" | xclip"))

(defcommand yaruo-kansha () ()
  (run-shell-command "echo \"[![LGTM](http://kaomojich.com/wp-content/uploads/yaruo/yaruo_23.gif)\" | xclip"))

(defcommand lgtm () ()
            (run-shell-command "echo \"[![LGTM](https://pbs.twimg.com/media/CE3uhqEUEAAAIKi.jpg:large)](https://pbs.twimg.com/media/CE3uhqEUEAAAIKi.jpg:large)\" | xclip"))

(defcommand yarimasu () ()
  (run-shell-command "echo \"[![LGTM](http://livedoor.blogimg.jp/uepkazuki/imgs/d/a/dab45f97.JPG)](http://livedoor.blogimg.jp/uepkazuki/imgs/d/a/dab45f97.JPG)\" | xclip"))

(defcommand mitsuwo () ()
  (let* ((url '("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTwjyBxB5cdoxGbwY7iKiibUI1Q4tkSOxo_dxxbg6Br8nq-5Nyj"
                "https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcSW9B17Be0ZFmCH2RzEJ4Gtb1-Hi1L8Fz6vv01UZlUPfByW__KP"
                "https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSurI8Sc-LAky6d_ErRbcaxxtXjk69p6fZhNNKCg7ZynvRUwC5r"
                "http://3.bp.blogspot.com/_7WnMRXf9Eoc/TAd108Qeq4I/AAAAAAAABHY/4YUIAjWDhbo/s1600/07%E3%81%8A%E3%81%8B%E3%81%92%E3%81%95%E3%82%93.jpg"
                "http://4.bp.blogspot.com/_5sgfHYPLLhE/TCDpfLrdv_I/AAAAAAAAASs/0g8erdfrEhI/s1600/%E3%81%BF%E3%81%A4%E3%82%92002.jpg"
                "http://www.handicraft-ashiya.jp/contents/blog/images/%E3%81%82%E3%81%84%E3%81%A0%E3%81%BF%E3%81%A4%E3%81%8A-2.jpg"
                "http://blogs.c.yimg.jp/res/blog-7b-c1/shuwa_shuwa_cream/folder/1040159/02/28284002/img_1?1296991077"
                "http://ski2007.txt-nifty.com/photos/uncategorized/2008/09/24/tensu.jpg"))
         (image (nth (random (length url)) url)))
    (run-shell-command (format nil "echo \"![kansha](~a)\" | xclip" image))))

(defcommand shoso () ()
  (run-shell-command "echo \"![](http://blog-imgs-35.fc2.com/u/l/t/ultrasue/syouso1.jpg)\" | xclip"))

(defcommand dogeza () ()
  (run-shell-command "echo \"![misawa](http://up.gc-img.net/post_img_web/2014/02/7345c92b9d0952a4697b83505c281eef_9288.gif)\" | xclip"))

(defcommand shippai () ()
  (let* ((url '("http://livedoor.4.blogimg.jp/cadillac600/imgs/5/7/57a2adc9.gif"
                "http://livedoor.4.blogimg.jp/cadillac600/imgs/7/f/7feda94d.gif"
                "https://lh3.googleusercontent.com/-DXzJw20aJ-A/VQaOFwCAvOI/AAAAAAAAKuE/bv0ufh3i4O0/w565-h350-no/iiioiii.gif"
                "http://livedoor.4.blogimg.jp/cadillac600/imgs/8/4/8460cb87.gif"
                "http://livedoor.4.blogimg.jp/cadillac600/imgs/c/6/c6c0fac7.gif"
                "http://livedoor.4.blogimg.jp/cadillac600/imgs/c/d/cd9ca812.gif"
                "http://blog-imgs-62.fc2.com/c/a/d/cadillac600/8a8a9b60_20141208193400ce3.jpg"
                "http://blog-imgs-62.fc2.com/c/a/d/cadillac600/523160yy_201411271547192b3.jpg"
                "http://livedoor.4.blogimg.jp/cadillac600/imgs/2/0/205fe5d0.gif"
                "http://blog-imgs-52.fc2.com/c/a/d/cadillac600/467x226xd025623fffc1ed18d87fad11.gif"
                "http://blog-imgs-52.fc2.com/c/a/d/cadillac600/img1cc9ec5bzi_20141110182720af9.jpg"
                "http://blog-imgs-67.fc2.com/c/a/d/cadillac600/2012091319020202.jpg"
                "http://blog-imgs-52.fc2.com/c/a/d/cadillac600/349x398x97c0f4b.gif"
                "http://blog-imgs-67.fc2.com/c/a/d/cadillac600/img711ffzik6zj000.jpg"
                "http://blog-imgs-67.fc2.com/c/a/d/cadillac600/f2f33f3f3.gif"
                "http://livedoor.4.blogimg.jp/cadillac600/imgs/d/b/db6b2bff.gif"
                "http://livedoor.4.blogimg.jp/cadillac600/imgs/3/6/36b42e7f.gif"))
         (image (nth (random (length url)) url)))
    (run-shell-command (format nil "echo \"![](~a)\" | xclip" image))))

(defcommand scrot () ()
  (run-shell-command "scrot -s"))

(defcommand cheese () ()
  (run-shell-command "cheese"))

(defcommand em () ()
  (emacs))

(defcommand rcopy (id) ((:string "id: "))
            (run-shell-command (format nil "lein exec mywork/clojure/scripts/src/scripts/redmine.clj ~a | xclip" id)))

(defcommand copy-lgtm () ()
  (run-shell-command "bash /home/hiroaki/dotfiles/lgtm.sh"))

(define-key *root-map* (kbd "l") "windowlist")
(define-key *root-map* (kbd "b") "grouplist")
(define-key *root-map* (kbd "[") "gprev")
(define-key *root-map* (kbd "]") "gnext")
(define-key *root-map* (kbd "t") "title")
(define-key *root-map* (kbd "RET") "open-chrome")
(define-key *root-map* (kbd "C-RET") "open-chrome")
(define-key *root-map* (kbd "f") "select-window firefox")
(define-key *root-map* (kbd "C-s") "select-window skype")
(define-key *root-map* (kbd "s") "select-window skype")
(define-key *root-map* (kbd "C-w") "select-window slack")
(define-key *root-map* (kbd "w") "select-window slack")
(define-key *root-map* (kbd "C-L") "select-window LINE")
(define-key *root-map* (kbd "L") "select-window LINE")
(define-key *root-map* (kbd "d") "select-window discord")
(define-key *root-map* (kbd "C-o") "select-window openscad")
(define-key *root-map* (kbd "o") "select-window openscad")
(define-key *root-map* (kbd "C-s") "select-window skype")
(define-key *root-map* (kbd "c") "select-window claude")
(define-key *root-map* (kbd "C-c") "select-window claude")
(define-key *root-map* (kbd "C-e") "select-window code")
(define-key *root-map* (kbd "e") "select-window emacs")
(define-key *root-map* (kbd "z") "select-window zoom")
(define-key *root-map* (kbd "h") "gmrun")
(define-key *root-map* (kbd "C-h") "gmrun")
(define-key *root-map* (kbd "C-E") "select-window CAD Exchanger")
(define-key *root-map* (kbd "E") "select-window CAD Exchanger")
(define-key *root-map* (kbd "r") "select-window reins")
;; (define-key *root-map* (kbd "g") "select-window chrome")
(define-key *root-map* (kbd "g") "select-window vivaldi")
(define-key *root-map* (kbd "C-t") "select-window terminal")
(define-key *root-map* (kbd "/") "window-single")
(define-key *input-map* (kbd "C-h") 'input-delete-backward-char)
(define-key *input-map* (kbd "C-w") 'input-backward-kill-word)
(define-key *input-map* (kbd "C-m") 'input-submit)
(define-key *input-map* (kbd "M-p") 'input-history-back)
(define-key *input-map* (kbd "M-n") 'input-history-forward)
(define-key *input-map* (kbd "C-i") 'input-complete-forward)

(defun go-to-emacs-buffer (buffer-name)
  (emacs)
  (send-meta-key (current-screen) (kbd "M-x"))
  (window-send-string "^switch-to-buffer$")
  (send-meta-key (current-screen) (kbd "RET"))
  (window-send-string buffer-name)
  (send-meta-key (current-screen) (kbd "RET")))


(defun emacs-scratch ()
  (emacs)
  (sleep 0.5)
  (send-meta-key (current-screen) (kbd "M-x"))
  (sleep 0.5)
  (window-send-string "^all-scratch$")
  (sleep 0.5)
  (send-meta-key (current-screen) (kbd "RET")))

(defcommand scratch () ()
  (emacs-scratch))

(defcommand eterm () ()
  (emacs)
  (send-meta-key (current-screen) (kbd "M-x"))
  (window-send-string "^elscreen-goto$")
  (send-meta-key (current-screen) (kbd "RET"))
  (window-send-string "1")
  (send-meta-key (current-screen) (kbd "RET")))

(define-key *root-map* (kbd "C-i") "inbox")
(define-key *root-map* (kbd "i") "inbox")
(define-key *root-map* (kbd "C-p") "chatgpt")
(define-key *root-map* (kbd "p") "chatgpt")
(define-key *root-map* (kbd "C-m") "google")
(define-key *root-map* (kbd "m") "google")
(define-key *root-map* (kbd "C-v") "youtube")
(define-key *root-map* (kbd "v") "youtube")
(define-key *root-map* (kbd "C-n") "amazon")
(define-key *root-map* (kbd "n") "amazon")
(define-key *root-map* (kbd "C-y") "youtube")
(define-key *root-map* (kbd "y") "youtube")
(define-key *root-map* (kbd "C-R") "reinit")
(define-key *root-map* (kbd "C-S") "esa")
(define-key *root-map* (kbd "C-M") "messanger")
(define-key *root-map* (kbd "C-N") "notion")
(define-key *root-map* (kbd "C-D") "drive")
(define-key *root-map* (kbd "C-B") "blueman")
(define-key *root-map* (kbd "C-b") "metabase")
(define-key *root-map* (kbd "C-A") "my-task")
(define-key *root-map* (kbd "C-G") "gmail")
(define-key *root-map* (kbd "C-C") "calendar")
(define-key *root-map* (kbd "C-T") "twitter")
(define-key *root-map* (kbd "C-F") "figma")
(define-key *root-map* (kbd "C-.") "google")
(define-key *root-map* (kbd ".") "google")
(define-key *root-map* (kbd "C-RET") "emacs")
(define-key *root-map* (kbd "RET") "emacs")
(define-key *root-map* (kbd "S") "scratch")
;(define-key *root-map* (kbd "C-y") "paste")
;(define-key *root-map* (kbd "y") "paste")

;(conkeror)
;(skype)

;; input strings
(defmacro definput (name command)
  ; (definput god "[/icons/god.icon]")
  `(defcommand ,(intern (format nil "input-~a" name)) () ()
     (let ((output (concatenate 'list ,command)))
       (dolist (char output)
         (send-meta-key (current-screen) (kbd (string char)))))))

(definput email "ohishi@catallaxy.me")
(definput aisatsu "itsumoosewaninatteorimasu.ooishidesu.hikituduki,douzoyorosikuonegaiitasimasu.")
(definput orico-import "konshuubunwoshutokusimasita.gokakuninnnohodoyorosikuonegaiitasimasu.")

(defcommand aisatsu () () (input-aisatsu))

(defmacro defscrapbox-icon (name)
  ; (defscrapbox-icon "heart")
  `(definput ,(format nil "scrapbox-~a" name) ,(format nil "/icons/~a.icon" name)))

;; Scrapboxのアイコン集
(defscrapbox-icon "heart")
(defscrapbox-icon "done")
(defscrapbox-icon "spinner")
(defscrapbox-icon "google")
(defscrapbox-icon "+1")
(defscrapbox-icon "idea")
(defscrapbox-icon "done")
(defscrapbox-icon "check")
(defscrapbox-icon "star2")

(defcommand input-words (words) ()
  (let ((output (concatenate 'list words)))
    (dolist (char output)
      (send-meta-key (current-screen) (kbd (string char))))))

(defcommand itsumo-osewaninatteorimaru () ()
  (input-words "itsumoosewaninatteorimasu.ooisidesu."))

(defcommand gorenraku-arigatou () ()
  (input-words "gorenrakuitadakiarigatougozaimasu."))

(defcommand konotabi-gosokurou () ()
  (input-words "konotabihagosokurouitadakimakotoniarigatougozaimasita."))

(defcommand toujitu () ()
  (input-words "toujituhaoaidekirukotowotanosiminisiteorimasu."))

(defcommand naiyou-shouchi () ()
  (input-words "naiyounitukimasite,shoutiitasimasita."))

(defcommand hikitsuzuki () ()
  (input-words "hikituduki,douzoyorosikuonegaimousiagemasu."))

(defcommand aisatsu () ()
  (input-words "sama,itsumoosewaninatteorimasu.ooishidesu.hikituduki,douzoyorosikuonegaiitasimasu."))

(defcommand juusho () ()
  (input-words "toukyoutominatokuakasaka1-12-32a-kumoribiru3F"))

(defcommand oaidekirukotowotanoshiminishiteorimasu () ()
  (input-words "oaidekirukotowo-tanoshiminishiteorimasu."))

(defcommand douzoyorosikuonegaiitasimasu () ()
  (input-words "douzoyorosikuonegaiitasimasu."))

(defcommand hajimemasite () ()
  (input-words "hajimemasite.Catallaxynoooisitomousimasu."))

(defcommand dummy-text () ()
  (input-words "Loremipsumdolorsitamet,consecteturadipisicingelit,seddoeiusmodtemporincididuntutlaboreetdoloremagnaaliqua.Utenimadminimveniam,quisnostrudexercitationullamcolaborisnisiutaliquipexeacommodoconsequat.Duisauteiruredolorinreprehenderitinvoluptatevelitessecillumdoloreeufugiatnullapariatur.Excepteursintoccaecatcupidatatnonproident,suntinculpaquiofficiadeseruntmollitanimidestlaborum."))

;; (defcommand ssh-mitsuri () ()
;;   ()
;;   (run-with-timer 1 nil
;;                   #'(lambda ()
;;                       )))

(run-shell-command "fcitx -d")
(define-key *root-map* (kbd "C-SPC") "exec fcitx-remote -t")
